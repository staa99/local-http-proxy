name: Release Binaries

on:
  release:
    types: [ published ]

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux (GNU)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # Linux (musl)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          # Linux ARM64 (GNU)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          # Linux ARMv7 (GNU EABIHF)
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          # macOS Intel
          - os: macos-13
            target: x86_64-apple-darwin
          # macOS Apple Silicon
          - os: macos-14
            target: aarch64-apple-darwin
          # Windows MSVC
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    env:
      BIN_NAME: local-http-proxy
      RELEASE_TAG: ${{ (github.event_name == 'release' && github.event.release.tag_name) || github.sha }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust (stable) and target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install musl tools (Linux musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install cross compilers (Linux ARM)
        if: startsWith(matrix.target, 'aarch64-unknown-linux') || startsWith(matrix.target, 'armv7-unknown-linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

      - name: Configure cross linkers (Linux ARM)
        if: startsWith(matrix.target, 'aarch64-unknown-linux') || startsWith(matrix.target, 'armv7-unknown-linux')
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> "$GITHUB_ENV"
          fi
          if [[ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
            echo "CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc" >> "$GITHUB_ENV"
          fi

      - name: Build (release)
        run: |
          cargo build --locked --release --target ${{ matrix.target }}

      - name: Prepare package (Unix)
        if: runner.os != 'Windows'
        id: pkg
        shell: bash
        run: |
          set -euxo pipefail
          TAG="${RELEASE_TAG}"
          TARGET="${{ matrix.target }}"
          BIN_PATH="target/${TARGET}/release/${BIN_NAME}"
          # Strip if available (no-op if not)
          if command -v strip >/dev/null 2>&1; then strip "$BIN_PATH" || true; fi
          PKG_NAME="${BIN_NAME}-${TAG}-${TARGET}"
          PKG_DIR="dist/${PKG_NAME}"
          mkdir -p "$PKG_DIR"
          cp "$BIN_PATH" "$PKG_DIR/"
          # Include README if present
          if [ -f README.md ]; then cp README.md "$PKG_DIR/"; fi
          # Create tarball in dist/
          mkdir -p dist
          tar -C dist -czf "dist/${PKG_NAME}.tar.gz" "${PKG_NAME}"
          # Checksum (prefer sha256sum, fallback to shasum) â€” write into dist/
          if command -v sha256sum >/dev/null 2>&1; then
            (cd dist && sha256sum "${PKG_NAME}.tar.gz" > "${PKG_NAME}.tar.gz.sha256")
          else
            shasum -a 256 "dist/${PKG_NAME}.tar.gz" > "dist/${PKG_NAME}.tar.gz.sha256"
          fi
          echo "artifact=dist/${PKG_NAME}.tar.gz" >> "$GITHUB_OUTPUT"
          echo "checksum=dist/${PKG_NAME}.tar.gz.sha256" >> "$GITHUB_OUTPUT"

      - name: Prepare package (Windows)
        if: runner.os == 'Windows'
        id: pkg_win
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $tag = "$env:RELEASE_TAG"
          $target = "${{ matrix.target }}"
          $binPath = "target/$target/release/${env:BIN_NAME}.exe"
          $pkgName = "$env:BIN_NAME-$tag-$target"
          $pkgDir = "dist/$pkgName"
          New-Item -ItemType Directory -Force -Path $pkgDir | Out-Null
          Copy-Item $binPath "$pkgDir/"
          if (Test-Path README.md) { Copy-Item README.md "$pkgDir/" }
          Compress-Archive -Path "$pkgDir/*" -DestinationPath "dist/$pkgName.zip" -Force
          Get-FileHash -Path "dist/$pkgName.zip" -Algorithm SHA256 | ForEach-Object { $_.Hash + "  $pkgName.zip" } | Out-File -Encoding ASCII "dist/$pkgName.zip.sha256"
          "artifact=dist/$pkgName.zip" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
          "checksum=dist/$pkgName.zip.sha256" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

      - name: Upload asset to release (Unix)
        if: runner.os != 'Windows' && github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.pkg.outputs.artifact }}
            ${{ steps.pkg.outputs.checksum }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload asset to release (Windows)
        if: runner.os == 'Windows' && github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.pkg_win.outputs.artifact }}
            ${{ steps.pkg_win.outputs.checksum }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
